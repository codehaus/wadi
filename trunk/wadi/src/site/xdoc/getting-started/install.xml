<?xml version="1.0"?>
<document>
  <properties>
    <title>Getting Started with WADI</title>
  </properties>
  <body>
    <section name="Getting Started: Installation">
      <p>
	To install WADI:
	<ul>
	  <li>
	    Either:
	    <ol>
	      <li>download a copy of WADI 2.0M1</li>
	      <li>unpack it somewhere</li>
	      <li>set WADI_HOME to this dir and export it</li>
	    </ol>
	  </li>
	  <li>
	    Or:
	    <ol>
	      <li>check out the latest WADI src from CVS</li>
	      <li>Build it</li>
	      <li>set WADI_HOME to the top of this tree and export it</li>
	    </ol>
	  </li>
	</ul>
      </p>

      <p>
	WADI nodes use a machine generated unique id to distinguish
	each other. For the purposes of logging and monitoring, WADI
	expects each node to also be given a more user-friendly id
	(ideally unique). This second id - the node's name - is used
	to label its configuration. The WADI demonstration uses
	colours (<font color="red">red</font>, <font
	color="green">green</font>, <font color="blue">blue</font>,
	...) as node names. Configurations corresponding to these
	names may be found in $WADI_HOME/conf.
      </p>
      <p>
	WADI integrates with a number of different web containers. To
	walk through the 'Getting Started' documentation, you will
	need at least one of the following installed and available to
	WADI. Choosing more than one container will allow you to test
	WADI's ability to cluster a mixed set of containers.

	<ul>
	  <li>Installing <a href="./tomcat.html">Tomcat 5.0.x, 5.5.x</a></li>
	  <li>Installing <a href="./jetty.html">Jetty 5, 6</a></li>
	  <li>Installing <a href="./geronimo.html">Geronimo-1.0</a></li>
	  <li>Installing <a href="./jboss.html">JBoss-4.x</a></li>
	</ul>
      </p>

      <p>
	WADI nodes speak to each other via asynchronous messages over
	ActiveMQ, JGroups or Tribes (IF YOU ARE ON TRUNK, IT IS USING
	JGROUPS - IGNORE THESE ACTIVEMQ INSTRUCTONS). ActiveMQ may be
	configured with a variety of protocol stacks. Ultimately, WADI
	will use ActiveMQ's peer:// protocol. This allows peers in a
	cluster to message each other directly. Currently, due to a
	couple of issues in the peer:// stack, the demonstration needs
	to be run on the tcp:// stack. This necessitates the running
	of a standalone message broker to which all nodes connect and
	via which all messages are exchanged. This is an obvious
	single point of failure and will be removed as soon as the
	issues with peer:// have been resolved. We are working on this
	as a priority.

	<ul>
	  <li>Download a copy of <a href="http://dist.codehaus.org/activemq/distributions">activemq-3.2.1</a> (trunk is now on 4.0)</li>
	  <li>Unpack it somewhere</li>
	  <li>Set ACTIVEMQ_HOME to this dir and export it</li>
	  <li>To start up the ActiveMQ broker: cd $ACTIVEMQ_HOME/bin; sh activemq.sh</li>
	  <li>To shut down the ActiveMQ broker: Ctl-c it</li>
	</ul>
      </p>

      <p>

	TRUNK ONLY - WADI needs somewhere to persist sessions whilst
	no WADI nodes are running. All peers in the cluster use the
	same database for this. It is only (currently) used by the
	first Peer to join the cluster and the last Peer to leave it.
	We are currently defaulting to using Derby, but any database
	supports the use of BLOBs via JDBC should be able to be
	integrated simply (see the <a
	href="http://svn.wadi.codehaus.org/viewrep/~raw,r=HEAD/wadi/trunk/wadi/wadi-webapp/src/webapp/WEB-INF/wadi-web.xml">WEB-INF/wadi-web.xml</a>
	in the demo webapp). DB access is currently serial from one
	node at a time only.

	<ul>
	  <li>Download a copy of <a href="http://db.apache.org/derby/releases/release-10.1.1.0.cgi">derby-10.1.1.0-bin</a></li>
	  <li>Unpack it somewhere</li>
	  <li>Set DERBY_INSTALL to this dir and export it</li>
	  <li>make a directory to keep Derby/WADI data and cd into it</li>
	  <li>start up the server:</li>
	  <ul>
	    <li>sh "$DERBY_INSTALL"/frameworks/NetworkServer/bin/startNetworkServer.ksh</li>
	  </ul>
	  <li>start a CLI from another window: </li>
	  <ul>
	    <li>export CLASSPATH=</li>
	    <li>. "$DERBY_INSTALL"/frameworks/embedded/bin/setEmbeddedCP.ksh</li>
	    <li>export CLASSPATH="$DERBY_INSTALL"/lib/derbyclient.jar:$CLASSPATH</li>
	    <li>sh "$DERBY_INSTALL"/frameworks/embedded/bin/ij.ksh</li>
	  </ul>
	  <li>Type this at the CLI to create a WADI database in the cwd of the server process: </li>
	  <ul>
	    <li>CONNECT 'jdbc:derby://localhost:1527/WADI;create=true';</li>
	  </ul>
	</ul>

	You have now initialised the WADI database. When running a
	WADI cluster you will need a Derby server instance running
	from the directory in which you created the database.

      </p>

    </section>
  </body>
</document>

